// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechStation.Data.DbContexts;

#nullable disable

namespace TechStation.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TechStation.Domain.Entities.Banner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BrendId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrendId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Banners");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BrendId = 1L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(2788),
                            Images = "banner_computers.jpg",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(2917)
                        },
                        new
                        {
                            Id = 2L,
                            BrendId = 2L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(3008),
                            Images = "banner_accessories.jpg",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(3008)
                        },
                        new
                        {
                            Id = 3L,
                            BrendId = 3L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(3010),
                            Images = "banner_gaming.jpg",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(3010)
                        },
                        new
                        {
                            Id = 4L,
                            BrendId = 4L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(3011),
                            Images = "banner_laptops.jpg",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(3012)
                        },
                        new
                        {
                            Id = 5L,
                            BrendId = 5L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(3013),
                            Images = "banner_monitors.jpg",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(3013)
                        });
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Brend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BrendName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brends");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BrendName = "Dell",
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(9255),
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(9257)
                        },
                        new
                        {
                            Id = 2L,
                            BrendName = "Logitech",
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(9258),
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(9259)
                        },
                        new
                        {
                            Id = 3L,
                            BrendName = "Corsair",
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(9260),
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(9260)
                        },
                        new
                        {
                            Id = 4L,
                            BrendName = "HP",
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(9261),
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(9261)
                        },
                        new
                        {
                            Id = 5L,
                            BrendName = "Samsung",
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(9262),
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 200, DateTimeKind.Utc).AddTicks(9263)
                        });
                });

            modelBuilder.Entity("TechStation.Domain.Entities.CartItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(2212),
                            ProductId = 1L,
                            Quantity = 1m,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(2213),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(2231),
                            ProductId = 2L,
                            Quantity = 2m,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(2231),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(2232),
                            ProductId = 3L,
                            Quantity = 1m,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(2233),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(2234),
                            ProductId = 4L,
                            Quantity = 1m,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(2234),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(2235),
                            ProductId = 5L,
                            Quantity = 1m,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(2236),
                            UserId = 5L
                        });
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Catalog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Catalogs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(4252),
                            Name = "Computers & Laptops",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(4252)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(4254),
                            Name = "Gaming & Peripherals",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(4254)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(4256),
                            Name = "Monitors & Displays",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(4256)
                        });
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CatalogId")
                        .HasColumnType("bigint");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CatalogId = 1L,
                            CategoryName = "Laptops",
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(6534),
                            Description = "Portable computers for work and play",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(6534)
                        },
                        new
                        {
                            Id = 2L,
                            CatalogId = 1L,
                            CategoryName = "Accessories",
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(6536),
                            Description = "Computer accessories including mice, keyboards, and more",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(6537)
                        },
                        new
                        {
                            Id = 3L,
                            CatalogId = 2L,
                            CategoryName = "Gaming",
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(6538),
                            Description = "Gaming equipment including chairs, desks, and peripherals",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(6538)
                        },
                        new
                        {
                            Id = 4L,
                            CatalogId = 1L,
                            CategoryName = "Monitors",
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(6540),
                            Description = "High-quality monitors for work and entertainment",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(6540)
                        },
                        new
                        {
                            Id = 5L,
                            CatalogId = 1L,
                            CategoryName = "Desktops",
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(6541),
                            Description = "Powerful desktop computers for gaming and work",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(6542)
                        });
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Favourite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(9511),
                            ProductId = 1L,
                            Quantity = 1,
                            TotalAmount = 999.99m,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(9511),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(9514),
                            ProductId = 2L,
                            Quantity = 2,
                            TotalAmount = 259.98m,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(9514),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(9516),
                            ProductId = 3L,
                            Quantity = 1,
                            TotalAmount = 199.99m,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(9517),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(9518),
                            ProductId = 4L,
                            Quantity = 1,
                            TotalAmount = 1399.99m,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(9519),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(9520),
                            ProductId = 5L,
                            Quantity = 1,
                            TotalAmount = 749.99m,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 201, DateTimeKind.Utc).AddTicks(9521),
                            UserId = 5L
                        });
                });

            modelBuilder.Entity("TechStation.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 999.99m,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(2207),
                            PaymentMethod = "Credit Card",
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(2207)
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 259.98m,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(2209),
                            PaymentMethod = "PayPal",
                            Status = 2,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(2210)
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 199.99m,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(2211),
                            PaymentMethod = "Credit Card",
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(2212)
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 1399.99m,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(2213),
                            PaymentMethod = "Credit Card",
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(2214)
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 749.99m,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(2215),
                            PaymentMethod = "PayPal",
                            Status = 2,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(2215)
                        });
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BrendId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrendId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BrendId = 1L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(5837),
                            Description = "A powerful and sleek laptop for professionals.",
                            Images = "dell_xps_13.jpg",
                            Price = 999.99m,
                            ProductName = "Dell XPS 13",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(5838)
                        },
                        new
                        {
                            Id = 2L,
                            BrendId = 2L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(5841),
                            Description = "A high-performance gaming mouse.",
                            Images = "logitech_g_pro_x.jpg",
                            Price = 129.99m,
                            ProductName = "Logitech G Pro X",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(5841)
                        },
                        new
                        {
                            Id = 3L,
                            BrendId = 3L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(5843),
                            Description = "Mechanical gaming keyboard with RGB lighting.",
                            Images = "corsair_k95_rgb_platinum.jpg",
                            Price = 199.99m,
                            ProductName = "Corsair K95 RGB Platinum",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(5843)
                        },
                        new
                        {
                            Id = 4L,
                            BrendId = 4L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(5845),
                            Description = "A gaming laptop with top-tier specs.",
                            Images = "hp_omen_15.jpg",
                            Price = 1399.99m,
                            ProductName = "HP Omen 15",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(5845)
                        },
                        new
                        {
                            Id = 5L,
                            BrendId = 5L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(5847),
                            Description = "A curved gaming monitor with 240Hz refresh rate.",
                            Images = "samsung_odyssey_g7.jpg",
                            Price = 749.99m,
                            ProductName = "Samsung Odyssey G7",
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(5847)
                        });
                });

            modelBuilder.Entity("TechStation.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(8733),
                            Email = "john@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "Password123",
                            PhoneNumber = "123-456-7890",
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(8733),
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(8736),
                            Email = "jane@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "Password123",
                            PhoneNumber = "123-456-7890",
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(8737),
                            UserName = "janesmith"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(8739),
                            Email = "alice@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Password = "Password123",
                            PhoneNumber = "123-456-7890",
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(8739),
                            UserName = "alicejohnson"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(8741),
                            Email = "bob@example.com",
                            FirstName = "Bob",
                            LastName = "Brown",
                            Password = "Password123",
                            PhoneNumber = "123-456-7890",
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(8741),
                            UserName = "bobbrown"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(8742),
                            Email = "charlie@example.com",
                            FirstName = "Charlie",
                            LastName = "Davis",
                            Password = "Password123",
                            PhoneNumber = "123-456-7890",
                            Role = 0,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 202, DateTimeKind.Utc).AddTicks(8743),
                            UserName = "charliedavis"
                        });
                });

            modelBuilder.Entity("TechStation.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 203, DateTimeKind.Utc).AddTicks(803),
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 203, DateTimeKind.Utc).AddTicks(804),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 203, DateTimeKind.Utc).AddTicks(806),
                            Role = 1,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 203, DateTimeKind.Utc).AddTicks(806),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 203, DateTimeKind.Utc).AddTicks(808),
                            Role = 1,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 203, DateTimeKind.Utc).AddTicks(808),
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 203, DateTimeKind.Utc).AddTicks(809),
                            Role = 3,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 203, DateTimeKind.Utc).AddTicks(809),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 203, DateTimeKind.Utc).AddTicks(811),
                            Role = 1,
                            UpdatedAt = new DateTime(2025, 4, 23, 7, 33, 28, 203, DateTimeKind.Utc).AddTicks(811),
                            UserId = 5L
                        });
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Banner", b =>
                {
                    b.HasOne("TechStation.Domain.Entities.Brend", "Brend")
                        .WithMany()
                        .HasForeignKey("BrendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechStation.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brend");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("TechStation.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechStation.Domain.Entities.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Category", b =>
                {
                    b.HasOne("TechStation.Domain.Entities.Catalog", "Catalog")
                        .WithMany("Categories")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Favourite", b =>
                {
                    b.HasOne("TechStation.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechStation.Domain.Entities.User", "User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Order", b =>
                {
                    b.HasOne("TechStation.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechStation.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("TechStation.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechStation.Domain.Entities.Payment", "Payment")
                        .WithMany("OrderDetails")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Product", b =>
                {
                    b.HasOne("TechStation.Domain.Entities.Brend", "Brend")
                        .WithMany("Products")
                        .HasForeignKey("BrendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechStation.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brend");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("TechStation.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("TechStation.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Brend", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Catalog", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.Payment", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("TechStation.Domain.Entities.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Favourites");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
